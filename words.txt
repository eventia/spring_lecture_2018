[2018-06-14-START]==========

bat 파일 저장 :

1. 사용

[gits.bat]
cmd /k "git status & D:\sts-3.9.4.RELEASE\STS.exe"

[auto.bat]
git add --all .
git commit -m "Spring Tutorial %date%"
git push

2. 미사용
git add --all .
git commit -m "%1"
git push


[2018-06-14-END]==========


zbc18 : DB생성 // ID,PW = oracle , oracle
DB Listener : 1521 , Transaction Server : 2030 , HTTP Listener : 8081


[단어설명]

Annotation : 사전적의미 주석, 컴파일 혹은 런타임에 해석, 메타데이터(실제데이터가 아닌 Data를 위한 데이터)로 JDK5부터 등장


콜백 : 


프레임 워크 : 비슷한 종류의 어플리케이션을 개발할때 뼈대가 되는 구조를 미리 작성해 놓고 그 뼈대를 토대로 각각의 어플리케이션을 개발하는 방법을 제공하는 미들웨어 프로그램, 객체지향 프로그래밍이 일반화 되면서 나타난 개념으로 어떤 프로그램이든지 다른 프로그램에서 사용한 코드와 비슷한 코드가 존재할 수 있고 다시 개발하지 않고 재사용을하면 시간과 노력을 절약할 수 있을 것이라는 생각에 초점을 맞춘것

- 프레임워크 선정 시 주의점
  1) 재사용성이 좋을 것
  2) 확장성이 좋을 것
  3) 사용하기 쉬울 것
  4) 플랫폼으로 부터서의 독립성
  5) 꾸준한 지원

2. MVC 패턴
- http://www.xeschool.com/xe/xenote_module_mvc

3. 계층화 아키텍처
- 대부분의 중/대규모 어플리케이션은 효율적인 개발 및 유지보수를 위해 계층화(layered)하여 개발하는것이 일반적
- 계층화 아키텍처는 MVC로 대표, MVC패턴을 더욱 세분화 해서 계층을 구분

  1) 프리젠테이션 계층 (Presentation Layer) - 표현과 이벤트 처리, 데이터 포맷 책임
      사용자와의 최종접전으로 데이터를 입력 받거나 출력해 보이는 계층, GUI에 기반한 프리젠테이션을 포함하고 있으며 이벤트 처리 및 데이터 포맷팅에 책임
      컨트롤러의 구성 요소와 상호 작용

  2) 제어 계층 (Control layer) - 구성 요소간의 처리 흐름의 제어, 데이터 조작 의뢰, 데이터 변환 및 연산, Exception, Error 처리
  사용자로부터 요청을 받고 응답을 처리하는 계층. 뷰 층으로 부터 이벤트를 메세지로 전환하여 Model 에게 전달하는 사용자 입력에 대한 응답 메커니즘을 포함
사용자의 요청을 검증하고 로직에 요청을 전달하는 일과 로직에서 전달된 응답을 적절한 뷰에 연결짓는 것이 제어 계층의 몫

  3) 비즈니스 계층(Business layer) - 컨트롤러와 뷰를 연결하는 역할, 다른 계층과 통신하기 위한 인터페이스 제공, 트랜잭션 처리 등
  다른 계층들과 통신하기 위한 인터페이스를 제공. 트랜랙션 처리와 제어 계층과 퍼시스턴스 계층 사이를 연결하는 역할로서 두 계층이 직접적으로 통신하지
  않게 하여 어플리케이션의 유연성을 증가시킴 

  4) 퍼시스턴스 계층(Persistence layer)

      데이터베이스나 파일에 접근하여 데이터를 CRUD하는 계층. 이 계층에서 사용할 수 있는 framework로는 JDO, Hibernate, ibetis, EJB 등이 ㅇㅆ음



  5) 도메인 모델 계층 (Domain Model layer)

     관계형 데이터 베이스의 엔티티와 비슷한 개념을 가지는것으로 데이터 객체를 말함



- 계층을 분리하는 이유는 하나의 계층에서 모든 작업을 전담하는 경우 같은 작업을 반복해서 구현해야하는 경우가 발생, 이로인해 많은 중복 코드가 발생하게

  됨으로서 유지보수가 어려워짐. 이처럼 명확하게 계층화해서 구현해야 재사용성이 높아짐



참고 : http://blog.daum.net/question0921/797





4. Annotation 이란

- 주석이라는 사전적의미가 있으며 컴파일 혹은 런타임에 해석된다

- 메타데이터(실제데이터가 아닌 Data를 위한 데이터) 라고도 불리고 JDK5부터 등장





5. @Bean 과 @Component

- 목적이 명확하지 않을 Bean을 생성할때 사용

- @Bean의 경우 개발자가 컨트롤 불가능한 외부 라이브러리들을 Bean으로 등록할때 사용, 

   settersk builder 등을 통해 사용자가 프로퍼티를 변경해서 생성한 인스턴스를 스프링에 관리하라고 맡기는것

- @Component의 경우 개발자가 직접 생성한 Class의 경우 사용, 클래스를 스프링에게 알아서 인스턴스 생성 후 등록(bean) 하라고 맡기는것

- 생성한 Class에 Bean선언 불가능, 각자 선언할 수 있는 타입이 정해져 있어서 해당 용도외에는 컴파일 에러 발생

- @Component는 선언된 클래스를 빈으로 등록, @Bean은 반환하는 객체를 빈으로 등록





6. DTO와 DAO

- DAO(Data Access Object)는 DB를 사용해 데이터를 CRUD하는 기능을 전담하도록 하는 오브젝트

  DB에 대한 접근을 DAO가 담당하고 DB에 대한 엑세스를 DAO에서만 하게되면 다수의 원격호출을 통한 오버헤드를 VO나 DTO를 통해 줄일 수 있음

- DTO(Data Transfer Object)는 VO(Value Object)라고도 함. 계층간 데이터 교환을 위한 자바빈즈

  계층은 컨트롤러,뷰,비지니스 계층,퍼시스던트 계층을 말하며 각 계층간 데이터 교환을 위한 객체를 DTO 또는 VO라고 함

  종류로는 폼데이터빈,데이터베이스 테이블빈 등

  폼 필드들의 이름을 그대로 갖고 있는 자바빈 객체를 폼 필드와 그대로 매팽해서 비지니스 계층으로 보낼때 사용

  순수한 데이터 객체이며 그 속성에 접근하기 위한 getter, setter만 가지고 있는 클래스



7. Stereotype-annotation

-  스프링은 자동적으로 Stereotype의 클래스들을 탐지하고 Bean으로 등록, Auto-Scanning Component

- @Component: 스프링이 관리하는 모든 컴포넌트에 관한 기본 스테레오 타입, 자동인식이 되는 일반 컴퍼넌트로 다른 Stereotype의 어노테이션을 포함

    멤버변수와 getter,setter만 가지고있는 DTO 컴포넌트, 메타 어노테이션

- @Service, @Controller, @Repository,@RestController는 더 특정한 use case에 대한 @Component의 특수한 형태

- @Service : 비지니스 서비스, 서비스 레이어, 비지니스 로직이 들어가는 Service로 등록

- @Controller : MVC의 컨트롤러임을 명시, 프레젠테이션 레이어의 컨트롤러 컴포넌트

- @RestController : @Controller와 @ResponseBody를 합친 기능

- @Repository : Dao에 적용, DB Exception Translation을 자동으로 해줌, 퍼시스턴트 레이어 , 영속성을 가지는 속성(파일,데이터베이스 등)

- @Repository, @Service, @Controller를 사용하면 도구들이 클래스를 처리하는데 더 적합하도록 할수 있고 관점에 더 연관성을 부여할 수 있음

- 스프링에서는 @Component보다 @Repository, @Service, @Controller,@RestController를 권장